<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Chat</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            color: #333;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            width: 100%;
            max-width: 1200px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }
        
        header {
            background: linear-gradient(to right, #5a67d8, #9f7aea);
            color: white;
            padding: 25px;
            text-align: center;
            position: relative;
        }
        
        header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .status-bar {
            display: flex;
            justify-content: center;
            align-items: center;
            background: #f8f9fa;
            padding: 12px;
            border-bottom: 1px solid #e9ecef;
        }
        
        .status {
            display: flex;
            align-items: center;
            font-weight: 600;
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .connected {
            background: #38b2ac;
        }
        
        .disconnected {
            background: #e53e3e;
        }
        
        .connecting {
            background: #d69e2e;
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .main-content {
            display: flex;
            padding: 20px;
            gap: 20px;
        }
        
        .video-container {
            flex: 2;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .video-wrapper {
            position: relative;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            background: #000;
            transition: transform 0.3s ease;
        }
        
        .video-wrapper:hover {
            transform: translateY(-5px);
        }
        
        .video-wrapper h3 {
            position: absolute;
            top: 15px;
            left: 15px;
            color: white;
            background: rgba(0, 0, 0, 0.5);
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 14px;
            z-index: 10;
        }
        
        video {
            width: 100%;
            display: block;
            height: 300px;
            object-fit: cover;
        }
        
        .sidebar {
            flex: 1;
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .participants {
            background: white;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
        }
        
        .participants h2 {
            font-size: 1.2rem;
            margin-bottom: 15px;
            color: #5a67d8;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .participant-list {
            list-style: none;
        }
        
        .participant-list li {
            padding: 10px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .participant-list li:last-child {
            border-bottom: none;
        }
        
        .participant-list li i {
            color: #5a67d8;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 15px;
            padding: 25px;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
        }
        
        .btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: none;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        
        .btn i {
            font-size: 20px;
            margin-bottom: 5px;
        }
        
        .btn span {
            font-size: 12px;
        }
        
        .btn-start {
            background: linear-gradient(to bottom, #38a169, #48bb78);
        }
        
        .btn-start:hover {
            background: linear-gradient(to bottom, #48bb78, #38a169);
            transform: scale(1.05);
        }
        
        .btn-end {
            background: linear-gradient(to bottom, #e53e3e, #f56565);
        }
        
        .btn-end:hover {
            background: linear-gradient(to bottom, #f56565, #e53e3e);
            transform: scale(1.05);
        }
        
        .btn-mute {
            background: linear-gradient(to bottom, #3182ce, #4299e1);
        }
        
        .btn-mute:hover {
            background: linear-gradient(to bottom, #4299e1, #3182ce);
            transform: scale(1.05);
        }
        
        .btn-video {
            background: linear-gradient(to bottom, #d69e2e, #ecc94b);
        }
        
        .btn-video:hover {
            background: linear-gradient(to bottom, #ecc94b, #d69e2e);
            transform: scale(1.05);
        }
        
        .btn:disabled {
            background: #a0aec0;
            cursor: not-allowed;
            transform: scale(0.95);
        }
        
        .btn-active {
            box-shadow: 0 0 0 3px white, 0 0 0 6px currentColor;
        }
        
        .chat-container {
            background: white;
            border-radius: 10px;
            padding: 15px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
        }
        
        .chat-container h2 {
            font-size: 1.2rem;
            margin-bottom: 15px;
            color: #5a67d8;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            margin-bottom: 15px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            min-height: 150px;
        }
        
        .message {
            padding: 8px 12px;
            margin-bottom: 10px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
        }
        
        .message.received {
            background: #e2e8f0;
            border-top-left-radius: 4px;
            align-self: flex-start;
        }
        
        .message.sent {
            background: #5a67d8;
            color: white;
            border-top-right-radius: 4px;
            align-self: flex-end;
            margin-left: auto;
        }
        
        .chat-input {
            display: flex;
            gap: 10px;
        }
        
        .chat-input input {
            flex-grow: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }
        
        .chat-input button {
            background: #5a67d8;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
        }
        
        @media (max-width: 900px) {
            .main-content {
                flex-direction: column;
            }
            
            .video-container {
                flex-direction: row;
            }
            
            .video-wrapper {
                flex: 1;
            }
        }
        
        @media (max-width: 600px) {
            .video-container {
                flex-direction: column;
            }
            
            .btn {
                width: 70px;
                height: 70px;
            }
            
            header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-video"></i> Video Chat</h1>
            <p>Connect with anyone, anywhere with crystal clear quality</p>
        </header>
        
        <div class="status-bar">
            <div class="status">
                <div class="status-indicator disconnected"></div>
                <span id="statusText">Disconnected</span>
            </div>
        </div>
        
        <div class="main-content">
            <div class="video-container">
                <div class="video-wrapper">
                    <h3><i class="fas fa-user"></i> You</h3>
                    <video id="localVideo" autoplay muted></video>
                </div>
                <div class="video-wrapper">
                    <h3><i class="fas fa-user-friends"></i> Remote</h3>
                    <video id="remoteVideo" autoplay></video>
                </div>
            </div>
            
            <div class="sidebar">
                <div class="participants">
                    <h2><i class="fas fa-users"></i> Participants</h2>
                    <ul class="participant-list">
                        <li><i class="fas fa-user-circle"></i> You</li>
                        <li><i class="fas fa-user-circle"></i> Waiting for participant...</li>
                    </ul>
                </div>
                
                <div class="chat-container">
                    <h2><i class="fas fa-comments"></i> Chat</h2>
                    <div class="chat-messages">
                        <div class="message received">System: You're now connected to the chat</div>
                    </div>
                    <div class="chat-input">
                        <input type="text" placeholder="Type a message...">
                        <button><i class="fas fa-paper-plane"></i></button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="controls">
            <button id="startBtn" class="btn btn-start">
                <i class="fas fa-phone"></i>
                <span>Start</span>
            </button>
            <button id="endBtn" class="btn btn-end" disabled>
                <i class="fas fa-phone-slash"></i>
                <span>End</span>
            </button>
            <button id="muteBtn" class="btn btn-mute" disabled>
                <i class="fas fa-microphone"></i>
                <span>Mute</span>
            </button>
            <button id="videoBtn" class="btn btn-video" disabled>
                <i class="fas fa-video"></i>
                <span>Video</span>
            </button>
        </div>
    </div>

    <script>
        // DOM elements
        const startBtn = document.getElementById('startBtn');
        const endBtn = document.getElementById('endBtn');
        const muteBtn = document.getElementById('muteBtn');
        const videoBtn = document.getElementById('videoBtn');
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');
        const statusText = document.getElementById('statusText');
        const statusIndicator = document.querySelector('.status-indicator');
        const chatMessages = document.querySelector('.chat-messages');
        const chatInput = document.querySelector('.chat-input input');
        const chatSendBtn = document.querySelector('.chat-input button');
        
        // State variables
        let localStream = null;
        let peerConnection = null;
        let isMuted = false;
        let isVideoEnabled = true;
        let chatConnectionActive = false;
        
        // Set up button event listeners
        startBtn.addEventListener('click', startChat);
        endBtn.addEventListener('click', endChat);
        muteBtn.addEventListener('click', toggleMute);
        videoBtn.addEventListener('click', toggleVideo);
        chatSendBtn.addEventListener('click', sendChatMessage);
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendChatMessage();
        });
        
        // Update status indicator
        function updateStatus(status, text) {
            statusIndicator.className = 'status-indicator ' + status;
            statusText.textContent = text;
        }
        
        // Initialize media devices
        async function initMedia() {
            try {
                // For demonstration, we'll use a placeholder since we can't access media devices in this environment
                localVideo.srcObject = null;
                remoteVideo.srcObject = null;
                
                // Simulate media access
                return new Promise(resolve => {
                    setTimeout(() => {
                        // In a real implementation, we would set the stream here
                        updateStatus('connecting', 'Connecting...');
                        resolve(true);
                    }, 1000);
                });
            } catch (error) {
                console.error('Error accessing media devices:', error);
                updateStatus('disconnected', 'Error accessing camera/microphone');
                return false;
            }
        }
        
        // Start chat function
        async function startChat() {
            updateStatus('connecting', 'Connecting...');
            startBtn.disabled = true;
            
            // Initialize media
            const mediaSuccess = await initMedia();
            if (!mediaSuccess) {
                startBtn.disabled = false;
                return;
            }
            
            // Simulate connection process
            setTimeout(() => {
                updateStatus('connected', 'Connected');
                endBtn.disabled = false;
                muteBtn.disabled = false;
                videoBtn.disabled = false;
                
                // Update participant list
                document.querySelector('.participant-list').innerHTML = `
                    <li><i class="fas fa-user-circle"></i> You</li>
                    <li><i class="fas fa-user-circle"></i> John Doe</li>
                `;
                
                // Enable chat
                chatConnectionActive = true;
                chatInput.disabled = false;
                
                // Add a welcome message to chat
                addChatMessage('System', 'You are now connected to John Doe', 'received');
                addChatMessage('John Doe', 'Hi there! How are you doing?', 'received');
            }, 2000);
        }
        
        // End chat function
        function endChat() {
            updateStatus('disconnected', 'Disconnected');
            
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            
            localVideo.srcObject = null;
            remoteVideo.srcObject = null;
            
            // Reset buttons
            startBtn.disabled = false;
            endBtn.disabled = true;
            muteBtn.disabled = true;
            videoBtn.disabled = true;
            
            // Reset states
            isMuted = false;
            isVideoEnabled = true;
            muteBtn.innerHTML = '<i class="fas fa-microphone"></i><span>Mute</span>';
            videoBtn.innerHTML = '<i class="fas fa-video"></i><span>Video</span>';
            
            // Reset participant list
            document.querySelector('.participant-list').innerHTML = `
                <li><i class="fas fa-user-circle"></i> You</li>
                <li><i class="fas fa-user-circle"></i> Waiting for participant...</li>
            `;
            
            // Disable chat
            chatConnectionActive = false;
            chatInput.disabled = true;
            chatInput.value = '';
            chatMessages.innerHTML = '<div class="message received">System: You\'re now disconnected from the chat</div>';
        }
        
        // Toggle mute function
        function toggleMute() {
            isMuted = !isMuted;
            if (isMuted) {
                muteBtn.innerHTML = '<i class="fas fa-microphone-slash"></i><span>Unmute</span>';
                muteBtn.classList.add('btn-active');
            } else {
                muteBtn.innerHTML = '<i class="fas fa-microphone"></i><span>Mute</span>';
                muteBtn.classList.remove('btn-active');
            }
        }
        
        // Toggle video function
        function toggleVideo() {
            isVideoEnabled = !isVideoEnabled;
            if (isVideoEnabled) {
                videoBtn.innerHTML = '<i class="fas fa-video"></i><span>Video</span>';
                videoBtn.classList.remove('btn-active');
            } else {
                videoBtn.innerHTML = '<i class="fas fa-video-slash"></i><span>Show</span>';
                videoBtn.classList.add('btn-active');
            }
        }
        
        // Add chat message
        function addChatMessage(sender, text, type) {
            const messageEl = document.createElement('div');
            messageEl.className = `message ${type}`;
            messageEl.innerHTML = `<strong>${sender}:</strong> ${text}`;
            chatMessages.appendChild(messageEl);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Send chat message
        function sendChatMessage() {
            const message = chatInput.value.trim();
            if (message && chatConnectionActive) {
                addChatMessage('You', message, 'sent');
                chatInput.value = '';
                
                // Simulate response after a short delay
                setTimeout(() => {
                    addChatMessage('John Doe', 'Thanks for your message!', 'received');
                }, 1000);
            }
        }
        
        // Initialize
        updateStatus('disconnected', 'Disconnected');
    </script>
</body>
</html>
